service: sls-go

plugins:
  - serverless-dotenv-plugin
  - serverless-go-plugin

useDotenv: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  runtime: go1.x
  architecture: x86_64
  region: ${opt:region, 'eu-central-1'}
  deploymentBucket: 
    name: ${self:custom.DeploymentsBucket.name}
  iam:
    role:
      statements:
        - ${file(sls/iam/files-s3-bucket.sls.yml):FilesS3BucketPolicy}
        - ${file(sls/iam/data-dynamodb-table.sls.yml):DataDynamodbTablePolicy}
  environment:
    STAGE: ${self:provider.stage}

package:
  individually: true
  exclude:
    - ./**
  include:
    - ./.bin/**

resources:
  Resources:
    FilesS3Bucket: ${file(sls/resources/files-s3-bucket.sls.yml):FilesS3Bucket}
    DataDynamodbTable: ${file(sls/resources/data-dynamodb-table.sls.yml):DataDynamodbTable}

custom:
  prefix: ${self:service}-${self:provider.stage}
  go:
    cmd: GOARCH=amd64 GOOS=linux go build -ldflags="-s -w"
  AWSAccountId: ${env:AWS_ACCOUNT_ID}
  FilesS3Bucket:
    name: ${self:custom.prefix}-${self:custom.AWSAccountId}-files-s3-bucket
  DeploymentsBucket:
    name: ${self:custom.prefix}-${self:custom.AWSAccountId}-deployments
  DataDynamodbTable:
    name: ${self:custom.prefix}-data-table
    arn: !GetAtt DataDynamodbTable.Arn

functions:
  s3ImportHandler:
    environment:
      DATA_DYNAMODB_TABLE: ${self:custom.DataDynamodbTable.name}
    handler: src/lambda/s3-import/main.go
    events:
      - s3:
          bucket: ${self:custom.FilesS3Bucket.name}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .csv
          existing: true
