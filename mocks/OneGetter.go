// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	core "sls-go/src/items/core"

	mock "github.com/stretchr/testify/mock"
)

// OneGetter is an autogenerated mock type for the OneGetter type
type OneGetter struct {
	mock.Mock
}

// GetOne provides a mock function with given fields: id
func (_m *OneGetter) GetOne(id string) (*core.Item, error) {
	ret := _m.Called(id)

	var r0 *core.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*core.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *core.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOneGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewOneGetter creates a new instance of OneGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOneGetter(t mockConstructorTestingTNewOneGetter) *OneGetter {
	mock := &OneGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
